// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id           String          @id @default(cuid()) @db.VarChar(32)
  name         String          @db.VarChar(50)
  logo         String?         @db.VarChar(256)
  icon         String?         @db.VarChar(256)
  website      String?         @db.VarChar(256)
  is_active    Boolean         @default(true)
  created_at   DateTime        @default(now())
  updated_at   DateTime        @updatedAt
  Users        User[]
  Students     Student[]
  Batches      StudentsBatch[]
  Classes      ClassStd[]
  Sections     ClassSection[]
  Teachers     Teacher[]
  Parents      Parent[]
  Staff        SchoolStaff[]
  CustomGroups CustomGroup[]
  Messages     Message[]
  Subjects     Subject[]
  Periods      RoutinePeriod[]
}

model User {
  id                  String               @id @default(cuid()) @db.VarChar(32)
  name                String               @db.VarChar(50)
  phone               String?              @db.VarChar(15)
  email               String?              @db.VarChar(256)
  password            String?              @db.VarChar(80)
  otp                 String?              @db.VarChar(10)
  otp_expiry          DateTime?
  gender              Gender?
  school_id           String               @db.VarChar(32)
  School              School               @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  student_id          String?              @unique @db.VarChar(32)
  Student             Student?             @relation(fields: [student_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  teacher_id          String?              @unique @db.VarChar(32)
  Teacher             Teacher?             @relation(fields: [teacher_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  parent_id           String?              @unique @db.VarChar(32)
  Parent              Parent?              @relation(fields: [parent_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  staff_id            String?              @unique @db.VarChar(32)
  Staff               SchoolStaff?         @relation(fields: [staff_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  is_active           Boolean              @default(true)
  created_at          DateTime             @default(now())
  updated_at          DateTime             @updatedAt
  Sessions            LoginSession[]
  CustomGroups        CustomGroupMembers[]
  CreatedCustomGroups CustomGroup[]
  Messages            Message[]

  @@unique([email, school_id])
  @@unique([phone, school_id])
}

enum Gender {
  Male
  Female
  Others
}

model Subject {
  id         String          @id @default(cuid()) @db.VarChar(32)
  name       String          @db.VarChar(50)
  school_id  String          @db.VarChar(32)
  School     School          @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  is_active  Boolean         @default(true)
  created_at DateTime        @default(now())
  updated_at DateTime        @updatedAt
  Periods    RoutinePeriod[]
}

model ClassStd {
  numeric_id Int             @db.SmallInt
  name       String?         @db.VarChar(50)
  school_id  String          @db.VarChar(32)
  School     School          @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  is_active  Boolean         @default(true)
  created_at DateTime        @default(now())
  updated_at DateTime        @updatedAt
  Sections   ClassSection[]
  Batches    StudentsBatch[]
  Periods    RoutinePeriod[]

  @@id([numeric_id, school_id])
}

model ClassSection {
  numeric_id Int             @db.SmallInt
  school_id  String          @db.VarChar(32)
  School     School          @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  class_id   Int             @db.SmallInt
  Class      ClassStd        @relation(fields: [class_id, school_id], references: [numeric_id, school_id], onDelete: Cascade, onUpdate: Cascade)
  name       String?         @db.VarChar(10)
  Periods    RoutinePeriod[]

  @@id([numeric_id, class_id, school_id])
}

model RoutinePeriod {
  section_id  Int          @db.SmallInt
  Section     ClassSection @relation(fields: [section_id, class_id, school_id], references: [numeric_id, class_id, school_id], onDelete: Cascade, onUpdate: Cascade)
  class_id    Int          @db.SmallInt
  Class       ClassStd     @relation(fields: [class_id, school_id], references: [numeric_id, school_id], onDelete: Cascade, onUpdate: Cascade)
  school_id   String       @db.VarChar(32)
  School      School       @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subject_id  String       @db.VarChar(32)
  Subject     Subject      @relation(fields: [subject_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  day_of_week DayOfWeek
  start_hour  Int          @db.SmallInt
  start_min   Int          @db.SmallInt
  end_hour    Int          @db.SmallInt
  end_min     Int          @db.SmallInt
  teacher_id  String?      @db.VarChar(32)
  Teacher     Teacher?     @relation(fields: [teacher_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  is_active   Boolean      @default(true)
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt

  @@id([section_id, class_id, school_id, subject_id])
}

enum DayOfWeek {
  sun
  mon
  tue
  wed
  thu
  fri
  sat
}

model StudentsBatch {
  numeric_id      Int       @db.SmallInt
  school_id       String    @db.VarChar(32)
  School          School    @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  class_id        Int?      @db.SmallInt
  Class           ClassStd? @relation(fields: [class_id, school_id], references: [numeric_id, school_id], onDelete: Restrict)
  JoiningStudents Student[] @relation("JoiningBatch")
  CurrentStudents Student[] @relation("CurrentBatch")
  is_active       Boolean   @default(true)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  @@id([numeric_id, school_id])
}

model Student {
  id                String                  @id @default(cuid()) @db.VarChar(32)
  school_id         String                  @db.VarChar(32)
  School            School                  @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roll_num          Int?                    @db.SmallInt
  joining_batch_num Int                     @db.SmallInt
  JoiningBatch      StudentsBatch           @relation("JoiningBatch", fields: [joining_batch_num, school_id], references: [numeric_id, school_id], onDelete: Restrict)
  current_batch_num Int?                    @db.SmallInt
  CurrentBatch      StudentsBatch?          @relation("CurrentBatch", fields: [current_batch_num, school_id], references: [numeric_id, school_id], onDelete: Restrict)
  section           Int?                    @db.SmallInt
  created_at        DateTime                @default(now())
  updated_at        DateTime                @updatedAt
  Parents           ParentStudent_mapping[]
  User              User?
}

model Teacher {
  id         String          @id @default(cuid()) @db.VarChar(32)
  school_id  String          @db.VarChar(32)
  School     School          @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime        @default(now())
  updated_at DateTime        @updatedAt
  Periods    RoutinePeriod[]
  User       User?
}

model Parent {
  id         String                  @id @default(cuid()) @db.VarChar(32)
  school_id  String                  @db.VarChar(32)
  School     School                  @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime                @default(now())
  updated_at DateTime                @updatedAt
  Students   ParentStudent_mapping[]
  User       User?
}

model SchoolStaff {
  id         String    @id @default(cuid()) @db.VarChar(32)
  role       StaffRole @default(others)
  school_id  String    @db.VarChar(32)
  School     School    @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  User       User?
}

enum StaffRole {
  principal
  vice_principal
  others
}

model ParentStudent_mapping {
  parent_id  String   @db.VarChar(32)
  Parent     Parent   @relation(fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  student_id String   @db.VarChar(32)
  Student    Student  @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now())

  @@id([parent_id, student_id])
}

model CustomGroup {
  id            String               @id @default(cuid()) @db.VarChar(32)
  name          String               @db.VarChar(50)
  school_id     String               @db.VarChar(32)
  School        School               @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_by_id String?              @db.VarChar(32)
  CreatedBy     User?                @relation(fields: [created_by_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  is_active     Boolean              @default(true)
  created_at    DateTime             @default(now())
  updated_at    DateTime             @updatedAt
  Members       CustomGroupMembers[]
}

model CustomGroupMembers {
  user_id    String      @db.VarChar(32)
  User       User        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  group_id   String      @db.VarChar(32)
  Group      CustomGroup @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  is_admin   Boolean     @default(false)
  created_at DateTime    @default(now())

  @@id([user_id, group_id])
}

model Message {
  id                String     @id @default(cuid()) @db.VarChar(32)
  parent_message_id String?    @db.VarChar(32)
  ParentMessage     Message?   @relation("Replies", fields: [parent_message_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  school_id         String     @db.VarChar(32)
  School            School     @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  text              String     @db.Text
  sender_id         String     @db.VarChar(32)
  Sender            User       @relation(fields: [sender_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sender_role       SenderRole
  group_identifier  String
  attachments       Json?
  edit_history      Json?
  is_active         Boolean    @default(true)
  created_at        DateTime   @default(now())
  updated_at        DateTime   @updatedAt
  Replies           Message[]  @relation("Replies")
  sort_key          BigInt     @unique @default(autoincrement()) @db.BigInt

  @@index([group_identifier, school_id])
}

enum SenderRole {
  student
  teacher
  parent
  staff
}

model LoginSession {
  id          String   @id @default(uuid()) @db.VarChar(36)
  user_id     String   @db.VarChar(32)
  User        User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  expiry_date DateTime
  created_at  DateTime @default(now())
}

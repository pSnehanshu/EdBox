// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
  // Error: Segmentation fault (core dumped).
  // Fix: https://github.com/prisma/prisma/issues/10649#issuecomment-1003642803
  engineType    = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id                    String                 @id @default(cuid()) @db.VarChar(32)
  name                  String                 @db.VarChar(50)
  logo                  String?                @db.VarChar(256)
  icon                  String?                @db.VarChar(256)
  website               String?                @db.VarChar(256)
  is_active             Boolean                @default(true)
  created_at            DateTime               @default(now())
  updated_at            DateTime               @updatedAt
  Users                 User[]
  Students              Student[]
  Batches               StudentsBatch[]
  Classes               ClassStd[]
  Sections              ClassSection[]
  Teachers              Teacher[]
  Parents               Parent[]
  Staff                 SchoolStaff[]
  CustomGroups          CustomGroup[]
  Messages              Message[]
  Subjects              Subject[]
  Periods               RoutinePeriod[]
  AttendancesTaken      PeriodAttendance[]
  StudentAttendances    StudentAttendance[]
  Exams                 Exam[]
  Tests                 ExamTest[]
  DynamicRoles          DynamicRole[]
  Homeworks             Homework[]
  FileUploadPermissions FileUploadPermission[]
  UploadedFiles         UploadedFile[]
  MessageAttachments    MessageAttachment[]
}

model User {
  id                    String                 @id @default(cuid()) @db.VarChar(32)
  name                  String                 @db.VarChar(50)
  phone                 String?                @db.VarChar(15)
  phone_isd_code        Int                    @default(91) @db.SmallInt()
  email                 String?                @db.VarChar(256)
  password              String?                @db.VarChar(80)
  otp                   String?                @db.VarChar(10)
  otp_expiry            DateTime?
  gender                Gender?
  school_id             String                 @db.VarChar(32)
  School                School                 @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  student_id            String?                @unique @db.VarChar(32)
  Student               Student?               @relation(fields: [student_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  teacher_id            String?                @unique @db.VarChar(32)
  Teacher               Teacher?               @relation(fields: [teacher_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  parent_id             String?                @unique @db.VarChar(32)
  Parent                Parent?                @relation(fields: [parent_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  staff_id              String?                @unique @db.VarChar(32)
  Staff                 SchoolStaff?           @relation(fields: [staff_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  is_active             Boolean                @default(true)
  created_at            DateTime               @default(now())
  updated_at            DateTime               @updatedAt
  Sessions              LoginSession[]
  CustomGroups          CustomGroupMembers[]
  CreatedCustomGroups   CustomGroup[]
  Messages              Message[]
  TestsCreated          ExamTest[]
  DynamicRoles          RoleUserMapping[]
  FileUploadPermissions FileUploadPermission[]
  UploadedFiles         UploadedFile[]

  @@unique([email, school_id])
  @@unique([phone_isd_code, phone, school_id])
}

enum Gender {
  Male
  Female
  Others
}

model Subject {
  id         String               @id @default(cuid()) @db.VarChar(32)
  name       String               @db.VarChar(50)
  school_id  String               @db.VarChar(32)
  School     School               @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  is_active  Boolean              @default(true)
  created_at DateTime             @default(now())
  updated_at DateTime             @updatedAt
  Periods    RoutinePeriod[]
  Tests      TestSubjectMapping[]
  Homeworks  Homework[]
}

model ClassStd {
  numeric_id Int             @db.SmallInt
  order      Float           @default(0) @db.Real
  name       String?         @db.VarChar(50)
  school_id  String          @db.VarChar(32)
  School     School          @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  is_active  Boolean         @default(true)
  created_at DateTime        @default(now())
  updated_at DateTime        @updatedAt
  Sections   ClassSection[]
  Batch      StudentsBatch?
  Periods    RoutinePeriod[]
  Tests      ExamTest[]
  Homeworks  Homework[]

  @@id([numeric_id, school_id])
}

model ClassSection {
  numeric_id Int             @db.SmallInt
  school_id  String          @db.VarChar(32)
  School     School          @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  class_id   Int             @db.SmallInt
  Class      ClassStd        @relation(fields: [class_id, school_id], references: [numeric_id, school_id], onDelete: Cascade, onUpdate: Cascade)
  name       String?         @db.VarChar(10)
  Periods    RoutinePeriod[]
  Tests      ExamTest[]
  Homeworks  Homework[]

  @@id([numeric_id, class_id, school_id])
}

model RoutinePeriod {
  id               String             @default(cuid()) @db.VarChar(32)
  section_id       Int                @db.SmallInt
  Section          ClassSection       @relation(fields: [section_id, class_id, school_id], references: [numeric_id, class_id, school_id], onDelete: Cascade, onUpdate: Cascade)
  class_id         Int                @db.SmallInt
  Class            ClassStd           @relation(fields: [class_id, school_id], references: [numeric_id, school_id], onDelete: Cascade, onUpdate: Cascade)
  school_id        String             @db.VarChar(32)
  School           School             @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subject_id       String             @db.VarChar(32)
  Subject          Subject            @relation(fields: [subject_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  day_of_week      DayOfWeek
  start_hour       Int                @db.SmallInt
  start_min        Int                @db.SmallInt
  end_hour         Int                @db.SmallInt
  end_min          Int                @db.SmallInt
  teacher_id       String?            @db.VarChar(32)
  Teacher          Teacher?           @relation(fields: [teacher_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  is_active        Boolean            @default(true)
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  AttendancesTaken PeriodAttendance[]

  @@id([id, school_id])
}

enum DayOfWeek {
  sun
  mon
  tue
  wed
  thu
  fri
  sat
}

model PeriodAttendance {
  id                 String              @default(cuid()) @db.VarChar(32)
  period_id          String              @db.VarChar(32)
  Period             RoutinePeriod       @relation(fields: [period_id, school_id], references: [id, school_id], onDelete: Cascade, onUpdate: Cascade)
  school_id          String              @db.VarChar(32)
  School             School              @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  year               Int                 @db.SmallInt
  month              Month
  day                Int                 @db.SmallInt
  teacher_id         String?             @db.VarChar(32)
  Teacher            Teacher?            @relation(fields: [teacher_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  created_at         DateTime            @default(now())
  updated_at         DateTime            @updatedAt
  StudentAttendances StudentAttendance[]

  @@id([id, school_id])
  @@unique([period_id, school_id, year, month, day])
}

enum Month {
  jan
  feb
  mar
  apr
  may
  jun
  jul
  aug
  sep
  oct
  nov
  dec
}

model StudentAttendance {
  attendance_id    String           @db.VarChar(32)
  PeriodAttendance PeriodAttendance @relation(fields: [attendance_id, school_id], references: [id, school_id], onDelete: Cascade, onUpdate: Cascade)
  school_id        String           @db.VarChar(32)
  School           School           @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  student_id       String           @db.VarChar(32)
  Student          Student          @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status           AttendanceStatus
  remarks          String?          @db.Text
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  @@id([student_id, attendance_id, school_id])
}

enum AttendanceStatus {
  present
  absent
}

model StudentsBatch {
  numeric_id      Int       @db.SmallInt
  school_id       String    @db.VarChar(32)
  School          School    @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  class_id        Int?      @db.SmallInt
  Class           ClassStd? @relation(fields: [class_id, school_id], references: [numeric_id, school_id], onDelete: Restrict)
  JoiningStudents Student[] @relation("JoiningBatch")
  CurrentStudents Student[] @relation("CurrentBatch")
  is_active       Boolean   @default(true)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  @@id([numeric_id, school_id])
  @@unique([class_id, school_id])
}

model Student {
  id                  String                  @id @default(cuid()) @db.VarChar(32)
  school_id           String                  @db.VarChar(32)
  School              School                  @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roll_num            Int                     @db.SmallInt
  joining_batch_num   Int                     @db.SmallInt
  JoiningBatch        StudentsBatch           @relation("JoiningBatch", fields: [joining_batch_num, school_id], references: [numeric_id, school_id], onDelete: Restrict)
  current_batch_num   Int?                    @db.SmallInt
  CurrentBatch        StudentsBatch?          @relation("CurrentBatch", fields: [current_batch_num, school_id], references: [numeric_id, school_id], onDelete: Restrict)
  section             Int?                    @db.SmallInt
  created_at          DateTime                @default(now())
  updated_at          DateTime                @updatedAt
  Parents             ParentStudent_mapping[]
  User                User?
  Attendances         StudentAttendance[]
  TestResults         ExamTestResult[]
  HomeworkSubmissions HomeworkSubmission[]

  @@unique([roll_num, section, current_batch_num])
}

model Teacher {
  id                        String                     @id @default(cuid()) @db.VarChar(32)
  school_id                 String                     @db.VarChar(32)
  School                    School                     @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at                DateTime                   @default(now())
  updated_at                DateTime                   @updatedAt
  Periods                   RoutinePeriod[]
  User                      User?
  AttendancesTaken          PeriodAttendance[]
  Homeworks                 Homework[]
  HomeworkSubmissionRemarks HomeworkSubmissionRemark[]
}

model Parent {
  id         String                  @id @default(cuid()) @db.VarChar(32)
  school_id  String                  @db.VarChar(32)
  School     School                  @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime                @default(now())
  updated_at DateTime                @updatedAt
  Students   ParentStudent_mapping[]
  User       User?
}

model SchoolStaff {
  id         String    @id @default(cuid()) @db.VarChar(32)
  role       StaffRole @default(others)
  school_id  String    @db.VarChar(32)
  School     School    @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  User       User?
}

enum StaffRole {
  principal
  vice_principal
  others
}

model ParentStudent_mapping {
  parent_id  String   @db.VarChar(32)
  Parent     Parent   @relation(fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  student_id String   @db.VarChar(32)
  Student    Student  @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now())

  @@id([parent_id, student_id])
}

model CustomGroup {
  id            String               @id @default(cuid()) @db.VarChar(32)
  name          String               @db.VarChar(50)
  school_id     String               @db.VarChar(32)
  School        School               @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_by_id String?              @db.VarChar(32)
  CreatedBy     User?                @relation(fields: [created_by_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  is_active     Boolean              @default(true)
  created_at    DateTime             @default(now())
  updated_at    DateTime             @updatedAt
  Members       CustomGroupMembers[]
}

model CustomGroupMembers {
  user_id    String      @db.VarChar(32)
  User       User        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  group_id   String      @db.VarChar(32)
  Group      CustomGroup @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  is_admin   Boolean     @default(false)
  created_at DateTime    @default(now())

  @@id([user_id, group_id])
}

model Message {
  id                String              @default(cuid()) @db.VarChar(32)
  parent_message_id String?             @db.VarChar(32)
  ParentMessage     Message?            @relation("Replies", fields: [parent_message_id, school_id], references: [id, school_id], onDelete: Cascade, onUpdate: Cascade)
  school_id         String              @db.VarChar(32)
  School            School              @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  text              String              @db.Text
  sender_id         String              @db.VarChar(32)
  Sender            User                @relation(fields: [sender_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sender_role       SenderRole
  group_identifier  String
  attachments       Json?
  edit_history      Json?
  is_active         Boolean             @default(true)
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  sort_key          BigInt              @unique @default(autoincrement()) @db.BigInt
  Replies           Message[]           @relation("Replies")
  Attachments       MessageAttachment[]

  @@id([id, school_id])
  @@index([group_identifier, school_id])
}

model MessageAttachment {
  message_id String       @db.VarChar(32)
  Message    Message      @relation(fields: [message_id, school_id], references: [id, school_id], onDelete: Cascade, onUpdate: Cascade)
  school_id  String       @db.VarChar(32)
  School     School       @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  file_id    String       @db.VarChar(32)
  File       UploadedFile @relation(fields: [file_id], references: [id])
  created_at DateTime     @default(now())

  @@id([message_id, file_id])
}

enum SenderRole {
  student
  teacher
  parent
  staff
}

model LoginSession {
  id          String   @id @default(uuid()) @db.VarChar(36)
  user_id     String   @db.VarChar(32)
  User        User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  expiry_date DateTime
  created_at  DateTime @default(now())
}

model Exam {
  id         String     @id @default(cuid()) @db.VarChar(32)
  name       String     @db.VarChar(100)
  school_id  String     @db.VarChar(32)
  School     School     @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  is_active  Boolean    @default(true)
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  Tests      ExamTest[]
}

model ExamTest {
  id               String               @id @default(cuid()) @db.VarChar(32)
  exam_id          String?              @db.VarChar(32) // Test can be part of an Exam or it can be independent
  Exam             Exam?                @relation(fields: [exam_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  school_id        String               @db.VarChar(32)
  School           School               @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subject_name     String?              @db.VarChar(100) // A custom subject name can be set if the test is not related to any one subject
  class_id         Int                  @db.SmallInt
  Class            ClassStd             @relation(fields: [class_id, school_id], references: [numeric_id, school_id], onDelete: Restrict, onUpdate: Cascade)
  section_id       Int?                 @db.SmallInt // If section_id is not defined, it is assumed that all sections have the Test
  Section          ClassSection?        @relation(fields: [section_id, class_id, school_id], references: [numeric_id, class_id, school_id], onDelete: Cascade, onUpdate: Cascade)
  date_of_exam     DateTime
  duration_minutes Int                  @default(0) @db.SmallInt
  is_active        Boolean              @default(true)
  creator_user_id  String?              @db.VarChar(32)
  CreatorUser      User?                @relation(fields: [creator_user_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  created_at       DateTime             @default(now())
  updated_at       DateTime             @updatedAt
  Subjects         TestSubjectMapping[]
  Results          ExamTestResult[]
}

model TestSubjectMapping {
  test_id    String   @db.VarChar(32)
  Test       ExamTest @relation(fields: [test_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subject_id String   @db.VarChar(32)
  Subject    Subject  @relation(fields: [subject_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([test_id, subject_id])
}

model ExamTestResult {
  id                   String          @id @default(cuid()) @db.VarChar(32)
  test_id              String          @db.VarChar(32)
  Test                 ExamTest        @relation(fields: [test_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  student_id           String          @db.VarChar(32)
  Student              Student         @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  overwrites_result_id String?         @unique @db.VarChar(32)
  OverwritesResult     ExamTestResult? @relation("overwrite", fields: [overwrites_result_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  created_at           DateTime        @default(now())
  updated_at           DateTime        @updatedAt
  OverwrittenByResult  ExamTestResult? @relation("overwrite")
}

model DynamicRole {
  id          String            @id @default(cuid()) @db.VarChar(32)
  school_id   String            @db.VarChar(32)
  School      School            @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permissions Int[]             @db.SmallInt
  is_active   Boolean           @default(true)
  created_at  DateTime          @default(now())
  updated_at  DateTime          @updatedAt
  Users       RoleUserMapping[]
}

model RoleUserMapping {
  user_id String      @db.VarChar(32)
  User    User        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role_id String      @db.VarChar(32)
  Role    DynamicRole @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([user_id, role_id])
}

model FileUploadPermission {
  id         String   @id @default(cuid()) @db.VarChar(32)
  s3key      String
  user_id    String   @db.VarChar(32)
  User       User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  school_id  String   @db.VarChar(32)
  School     School   @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  expiry     DateTime
  created_at DateTime @default(now())
}

model UploadedFile {
  id                        String                               @id @default(cuid()) @db.VarChar(32)
  file_name                 String
  s3key                     String
  size_bytes                Int?
  file_type                 String?                              @db.VarChar(30)
  school_id                 String                               @db.VarChar(32)
  School                    School                               @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  uploader_user_id          String?                              @db.VarChar(32)
  UploaderUser              User?                                @relation(fields: [uploader_user_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  preview_type              PreviewType?
  preview_value             String?                              @db.Text
  created_at                DateTime                             @default(now())
  Homeworks                 HomeworkAttachment[]
  HomeworkSubmissions       HomeworkSubmissionAttachment[]
  HomeworkSubmissionRemarks HomeworkSubmissionRemarkAttachment[]
  Messages                  MessageAttachment[]
}

enum PreviewType {
  blurhash
  b64img
}

model Homework {
  id          String               @id @default(cuid()) @db.VarChar(32)
  text        String?              @db.Text
  due_date    DateTime?
  teacher_id  String?              @db.VarChar(32)
  Teacher     Teacher?             @relation(fields: [teacher_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  subject_id  String               @db.VarChar(32)
  Subject     Subject              @relation(fields: [subject_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  section_id  Int                  @db.SmallInt
  Section     ClassSection         @relation(fields: [section_id, class_id, school_id], references: [numeric_id, class_id, school_id], onDelete: Cascade, onUpdate: Cascade)
  class_id    Int                  @db.SmallInt
  Class       ClassStd             @relation(fields: [class_id, school_id], references: [numeric_id, school_id], onDelete: Cascade, onUpdate: Cascade)
  school_id   String               @db.VarChar(32)
  School      School               @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at  DateTime             @default(now())
  updated_at  DateTime             @updatedAt
  Submissions HomeworkSubmission[]
  Attachments HomeworkAttachment[]
}

model HomeworkAttachment {
  homework_id String       @db.VarChar(32)
  Homework    Homework     @relation(fields: [homework_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  file_id     String       @db.VarChar(32)
  File        UploadedFile @relation(fields: [file_id], references: [id])
  created_at  DateTime     @default(now())

  @@id([homework_id, file_id])
}

model HomeworkSubmission {
  id          String                         @id @default(cuid()) @db.VarChar(32)
  text        String?                        @db.Text
  homework_id String                         @db.VarChar(32)
  Homework    Homework                       @relation(fields: [homework_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  student_id  String                         @db.VarChar(32)
  Student     Student                        @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at  DateTime                       @default(now())
  updated_at  DateTime                       @updatedAt
  Remarks     HomeworkSubmissionRemark[]
  Attachments HomeworkSubmissionAttachment[]
}

model HomeworkSubmissionAttachment {
  submission_id String             @db.VarChar(32)
  Submission    HomeworkSubmission @relation(fields: [submission_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  file_id       String             @db.VarChar(32)
  File          UploadedFile       @relation(fields: [file_id], references: [id])
  created_at    DateTime           @default(now())

  @@id([submission_id, file_id])
}

model HomeworkSubmissionRemark {
  id            String                               @id @default(cuid()) @db.VarChar(32)
  text          String?                              @db.Text
  submission_id String                               @db.VarChar(32)
  Submission    HomeworkSubmission                   @relation(fields: [submission_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teacher_id    String?                              @db.VarChar(32)
  Teacher       Teacher?                             @relation(fields: [teacher_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  Attachments   HomeworkSubmissionRemarkAttachment[]
}

model HomeworkSubmissionRemarkAttachment {
  remark_id  String                   @db.VarChar(32)
  Submission HomeworkSubmissionRemark @relation(fields: [remark_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  file_id    String                   @db.VarChar(32)
  File       UploadedFile             @relation(fields: [file_id], references: [id])
  created_at DateTime                 @default(now())

  @@id([remark_id, file_id])
}
